// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  // relationMode = "foreignKeys"
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

generator zod {
  provider              = "zod-prisma"
  output                = "../src/models"
  relationModel         = false
  modelCase             = "PascalCase"
  modelSuffix           = ""
  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs          = true
  // imports                  = null
  prismaJsonNullability = true
  // prismaJsonNullability = false
}

model Sentence {
    // id        String   @id @default(cuid())
    sentenceUID String @id @unique //hash of the sentence, just make everything lower case and replace space with underscore
    sentence String //actual sentence
    words Json @default("[]") //will hold the array for words and their corresponding data (translations, audio, etc.)
}

//keeping it here for potential future reference since I don't know prisma file schema that well
// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
